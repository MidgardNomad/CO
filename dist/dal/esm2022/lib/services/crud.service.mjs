import { Injectable } from '@angular/core';
import { map } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/fire/compat/firestore";
export class CrudService {
    constructor(db) {
        this.db = db;
    }
    // get all data (snapshot)
    getData(collection) {
        return this.db.collection(collection).snapshotChanges();
    }
    //get all data using get()
    getAllData(collection) {
        return this.db.collection(collection).get();
    }
    //set a single Document with a custom ID
    setSingleDoc(collectionName, docID, data) {
        return this.db.doc(`/${collectionName}/${docID}`).set(data);
    }
    //Get a document by ID
    getSignleDoc(collectionName, docID) {
        return this.db.doc(`/${collectionName}/${docID}`).get();
    }
    //Create a subcollection
    addDataToSubCollection(collectionPath, data) {
        return this.db.collection(collectionPath).add(data);
    }
    //get data from a sub collection
    getSubCollectionData(collectionPath) {
        return this.db.collection(collectionPath).get();
    }
    // add data
    addData(collectionName, data) {
        return this.db.collection(collectionName).add(data);
    }
    // update data
    updateData(collectionName, id, data) {
        return this.db.collection(collectionName).doc(id).update(data);
    }
    // delete data
    deleteData(collectionName, id) {
        return this.db.collection(collectionName).doc(id).delete();
    }
    // get single data
    getSingleData(collectionName, id) {
        return this.db.collection(collectionName).doc(id).get();
    }
    //Get Single Doc snapshot
    getSignleDocSnap(collectionName, id) {
        return this.db.collection(collectionName).doc(id).snapshotChanges();
    }
    //Get Data Ordered
    getDataByOrder(collectionpath, field) {
        return this.db
            .collection(collectionpath, (ref) => ref.orderBy(field))
            .snapshotChanges();
    }
    getSingleDocByField(collectionName, field, value) {
        return this.db
            .collection(collectionName, (ref) => ref.where(field, '==', value))
            .get();
    }
    getDocByTwoField(collectionName, field1, value1, field2, value2) {
        return this.db
            .collection(collectionName, (ref) => ref.where(field1, '==', value1).where(field2, '==', value2))
            .get().pipe(map((res) => res.docs.map((c) => { return { ...c.data() }; })));
    }
    getDocByThreeField(collectionName, field1, value1, field2, value2, field3, value3) {
        return this.db
            .collection(collectionName, (ref) => ref.where(field1, '==', value1).where(field2, '==', value2).where(field3, '==', value3))
            .get().pipe(map((res) => res.docs.map((c) => { return { ...c.data(), id: c.id }; })));
    }
    // get single data snapshotChanges
    getSingleDataByField(collectionName, field, value) {
        return this.db
            .collection(collectionName, (ref) => ref.where(field, '==', value))
            .snapshotChanges();
    }
    // get single data snapshotChanges
    getDataByOneField(collectionName, field, value) {
        return this.db
            .collection(collectionName, (ref) => ref.where(field, '==', value))
            .get().pipe(map((res) => res.docs.map((c) => { return { ...c.data(), id: c.id }; })));
    }
    // get single data Asc
    getSingleDataAsc(collectionName) {
        return this.db
            .collection(collectionName, (ref) => ref.orderBy('seqNo').limit(1))
            .get().pipe(map(data => { const doc = data.docs[0]; return doc ? { id: doc.id, ...doc.data } : null; }));
    }
    // get single data
    getSingleDataByFieldWithLimit(collectionName, field, value, limit) {
        return this.db
            .collection(collectionName, (ref) => ref.where(field, '==', value).limit(limit))
            .snapshotChanges();
    }
    // get single data
    getSingleDataByFieldWithOrder(collectionName, field, value, orderField, order) {
        return this.db
            .collection(collectionName, (ref) => ref.where(field, '==', value).orderBy(orderField, order))
            .snapshotChanges();
    }
    // get single data
    getSingleDataByFieldWithOrderAndLimit(collectionName, field, value, orderField, order, limit) {
        return this.db
            .collection(collectionName, (ref) => ref.where(field, '==', value).orderBy(orderField, order).limit(limit))
            .snapshotChanges();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CrudService, deps: [{ token: i1.AngularFirestore }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CrudService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CrudService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.AngularFirestore }]; } });
//# sourceMappingURL=data:application/json;base64,