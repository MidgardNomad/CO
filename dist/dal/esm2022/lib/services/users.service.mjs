import { map } from 'rxjs';
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./crud.service";
import * as i2 from "./auth.service";
export class UsersService {
    constructor(crudService, authService) {
        this.crudService = crudService;
        this.authService = authService;
        this._usersCollection = 'users';
        this._coursesCollection = 'courses';
        this._bookedSessionsCollection = 'booked-sessions';
        this._projectsCollection = 'projects';
    }
    async createUserDoc(newUser, country, countryCode) {
        return new Promise((resolve, reject) => {
            this.crudService
                .setSingleDoc('users', newUser.user.uid, {
                id: newUser.user.uid,
                email: newUser.user.email,
                displayName: newUser.user.displayName,
                photoURL: newUser.user.photoURL,
                isVerified: false,
                isPro: false,
                active: false,
                lastLogin: new Date(),
                createdAt: new Date(),
                updatedAt: new Date(),
                maxStreak: 0,
                currentStreak: 0,
                streakDays: [],
                deletedAt: null,
                deleted: false,
                courseList: [],
                linkedIn: '',
                gitHub: '',
                bio: '',
                countryCode,
                country,
                paid: true,
                sessionExpirationDate: null,
                // availableSessions: null,
            })
                .then((res) => resolve(res))
                .catch((error) => reject(error));
        });
    }
    getUser() {
        this.authService.user.subscribe((userAuthObj) => {
            if (userAuthObj == null) {
                this.userDoc = null;
            }
            else {
                this.userDoc = this.getActiveUser(userAuthObj.uid);
            }
        });
    }
    getAllUsers() {
        return this.crudService.getData(this._usersCollection).pipe(map((docSnaps) => {
            return docSnaps.map((docSnap) => {
                return {
                    id: docSnap.payload.doc.id,
                    ...docSnap.payload.doc.data(),
                };
            });
        }));
    }
    getActiveUser(userID) {
        return this.crudService
            .getSignleDocSnap(this._usersCollection, userID)
            .pipe(map((userDocSnap) => {
            return {
                id: userDocSnap.payload.id,
                ...userDocSnap.payload.data(),
            };
        }));
    }
    getSingleUser(userID) {
        return this.crudService.getSignleDoc(this._usersCollection, userID).pipe(map((userDocSnap) => {
            console.log('userDocSnap', userDocSnap);
            return {
                id: userDocSnap.id,
                isExist: userDocSnap.exists,
                ...userDocSnap.data(),
            };
        }));
    }
    // get data coursrs
    getUserCourses(userID) {
        return this.crudService
            .getSubCollectionData(`/${this._usersCollection}/${userID}/${this._coursesCollection}`)
            .pipe(map((courseDocSanps) => {
            return courseDocSanps.docs.map((courseDocSnap) => {
                return {
                    id: courseDocSnap.id,
                    ...courseDocSnap.data(),
                };
            });
        }));
    }
    //Enroll User in Course
    async enrollInCourse(userID, courseID, data) {
        return new Promise((resolve, reject) => {
            this.crudService
                .setSingleDoc(`${this._usersCollection}/${userID}/${this._coursesCollection}`, courseID, data)
                .then((response) => resolve(response))
                .catch((error) => reject(error));
        });
    }
    async addCourseLevelToUserDoc(userID, courseLevel) {
        return new Promise((resolve, reject) => {
            this.crudService
                .updateData('users', userID, { courseList: courseLevel })
                .then((res) => resolve(res))
                .catch((error) => reject(error));
        });
    }
    async updateUserStearkDays(userID, streakDays, maxStreak, currentStreak) {
        return new Promise((resolve, reject) => {
            this.crudService
                .updateData('users', userID, {
                streakDays,
                maxStreak,
                currentStreak,
            })
                .then(resolve)
                .catch(reject);
        });
    }
    async updateUserDoc(user) {
        return new Promise((resolve, reject) => {
            this.crudService
                .updateData('users', user.id, user)
                .then(resolve)
                .catch(reject);
        });
    }
    async TareCurrentStreak(userID) {
        return new Promise((resolve, reject) => {
            this.crudService
                .updateData('users', userID, { currentStreak: 0 })
                .then(resolve)
                .catch(reject);
        });
    }
    //Books Sessions:
    async bookSession(session) {
        return new Promise((resolve, reject) => {
            this.crudService
                .addData(this._bookedSessionsCollection, session)
                .then((res) => resolve(res))
                .catch((error) => reject(error));
        });
    }
    //Projects
    getUserProjects(userID) {
        return this.crudService
            .getData(`/${this._usersCollection}/${userID}/${this._projectsCollection}`)
            .pipe(map((userProjectsDocs) => {
            return userProjectsDocs.map((project) => {
                return {
                    id: project.payload.doc.id,
                    ...project.payload.doc.data(),
                };
            });
        }));
    }
    async submitProject(userID, project) {
        return new Promise((resolve, reject) => {
            this.crudService
                .addData(`${this._usersCollection}/${userID}/${this._projectsCollection}`, project)
                .then(resolve)
                .catch(reject);
        });
    }
    //user setttings
    async addUserSocials(userID, socials) {
        return new Promise((resolve, reject) => {
            this.crudService
                .updateData(this._usersCollection, userID, socials)
                .then((res) => resolve(res))
                .catch((error) => reject(error));
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UsersService, deps: [{ token: i1.CrudService }, { token: i2.AuthService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UsersService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UsersService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.CrudService }, { type: i2.AuthService }]; } });
//# sourceMappingURL=data:application/json;base64,