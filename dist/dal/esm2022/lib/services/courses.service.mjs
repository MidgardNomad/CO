import { Injectable } from '@angular/core';
import { map } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./crud.service";
export class CoursesService {
    constructor(crudSerive) {
        this.crudSerive = crudSerive;
        this._coursesCollection = 'courses';
        this._chaptersCollection = 'chapters';
        this._projectsCollection = 'project';
        this._lecturesCollection = 'lectures';
        this._slidesCollection = 'slides';
    }
    //Courses Methods:
    //=============================================================
    getAllCourses() {
        return this.crudSerive
            .getDataByOrder(this._coursesCollection, 'seqNo')
            .pipe(map((docSnapShots) => {
            return docSnapShots.map((docSnap) => {
                return {
                    id: docSnap.payload.doc.id,
                    ...docSnap.payload.doc.data(),
                };
            });
        }));
    }
    getCourse(courseID) {
        return this.crudSerive.getSignleDoc(this._coursesCollection, courseID).pipe(map((courseDocSnap) => {
            return {
                id: courseDocSnap.id,
                ...courseDocSnap.data(),
            };
        }));
    }
    async createNewCourse(courseTitle, courseDescription, seqNo) {
        return new Promise((resolve, reject) => {
            this.crudSerive
                .addData(this._coursesCollection, {
                title: courseTitle,
                description: courseDescription,
                seqNo,
            })
                .then((res) => resolve(res))
                .catch((error) => reject(error));
        });
    }
    async editCourse(courseID, data) {
        return new Promise((resolve, reject) => {
            this.crudSerive
                .updateData(this._coursesCollection, courseID, data)
                .then((res) => resolve(res))
                .catch((error) => reject(error));
        });
    }
    async deleteCourse(courseID) {
        return new Promise((resolve, reject) => {
            this.crudSerive
                .deleteData(this._coursesCollection, courseID)
                .then((res) => resolve(res))
                .catch((error) => reject(error));
        });
    }
    //=============================================================
    //Chapters Methods:
    //=============================================================
    //Get all chapters
    getChapters(courseID) {
        return this.crudSerive
            .getDataByOrder(`/${this._coursesCollection}/${courseID}/${this._chaptersCollection}`, 'seqNo')
            .pipe(map((docSnaps) => {
            return docSnaps.map((snap) => {
                return {
                    id: snap.payload.doc.id,
                    ...snap.payload.doc.data(),
                };
            });
        }));
    }
    //Get chapter ID by seqNo: 1
    getFirstChapter(courseID) {
        return this.crudSerive
            .getSingleDataByField(`/${this._coursesCollection}/${courseID}/${this._chaptersCollection}`, 'seqNo', 1)
            .pipe(map((chapterDocSnap) => {
            return chapterDocSnap[0].payload.doc.id;
        }));
    }
    async createNewCourseChapter(courseID, data) {
        return new Promise((resolve, reject) => {
            this.crudSerive
                .addDataToSubCollection(`/${this._coursesCollection}/${courseID}/${this._chaptersCollection}`, data)
                .then((res) => resolve(res))
                .catch((error) => reject(error));
        });
    }
    async editChapterDetails(courseID, chapterID, data) {
        return new Promise((resolve, reject) => {
            this.crudSerive
                .updateData(`/${this._coursesCollection}/${courseID}/${this._chaptersCollection}`, chapterID, data)
                .then((res) => resolve(res))
                .catch((error) => reject(error));
        });
    }
    async deleteChapter(courseID, chapterID) {
        return new Promise((resolve, reject) => {
            this.crudSerive
                .deleteData(`/${this._coursesCollection}/${courseID}/${this._chaptersCollection}`, chapterID)
                .then((res) => resolve(res))
                .catch((error) => reject(error));
        });
    }
    //=============================================================
    //Projects Methods:
    //=============================================================
    // add Project
    addProjects(id, data) {
        this.crudSerive.addData(`${this._coursesCollection}/${id}/${this._projectsCollection}`, data);
    }
    // Get Data From Collection Project
    getDataProject(id) {
        return this.crudSerive
            .getData(`${this._coursesCollection}/${id}/${this._projectsCollection}`)
            .pipe(map((data) => {
            return data.map((ele) => {
                return {
                    id: ele.payload.doc.id,
                    ...ele.payload.doc.data(),
                };
            });
        }));
    }
    // delet Project
    deletProject(id, uid) {
        return this.crudSerive.deleteData(`${this._coursesCollection}/${id}/${this._projectsCollection}`, uid);
    }
    // getOne For card Project
    getOneProject(id, uid) {
        return this.crudSerive
            .getSignleDoc(`${this._coursesCollection}/${id}/${this._projectsCollection}`, uid)
            .pipe(map((projectDocSnap) => {
            return { ...projectDocSnap.data() };
        }));
    }
    //  Edit Card For Project
    editCard(id, uid, title) {
        return this.crudSerive.updateData(`${this._coursesCollection}/${id}/${this._projectsCollection}`, uid, { title });
    }
    //  Edit Content inside Project
    editContent(courseID, uid, content) {
        return this.crudSerive.updateData(`${this._coursesCollection}/${courseID}/${this._projectsCollection}/`, uid, {
            content,
        });
    }
    //=============================================================
    //=============================================================
    //Lectures Methods:
    //=============================================================
    getAllLectures(courseID, chapterID) {
        return this.crudSerive
            .getDataByOrder(`/${this._coursesCollection}/${courseID}/${this._chaptersCollection}/${chapterID}/${this._lecturesCollection}`, 'seqNo')
            .pipe(map((docSnaps) => {
            return docSnaps.map((doc) => {
                return {
                    id: doc.payload.doc.id,
                    ...doc.payload.doc.data(),
                };
            });
        }));
    }
    getFirstLecture(courseID, chapterId) {
        return this.crudSerive
            .getSingleDataByField(`/${this._coursesCollection}/${courseID}/${this._chaptersCollection}/${chapterId}/${this._lecturesCollection}`, 'seqNo', 1)
            .pipe(map((docSnaps) => {
            return docSnaps[0].payload.doc.id;
        }));
    }
    async addNewLecture(courseID, chapterID, data) {
        return new Promise((resolve, reject) => {
            this.crudSerive
                .addDataToSubCollection(`/${this._coursesCollection}/${courseID}/${this._chaptersCollection}/${chapterID}/${this._lecturesCollection}`, data)
                .then((res) => resolve(res))
                .catch((error) => reject(error));
        });
    }
    async editLectureDetails(courseID, chapterID, lectureID, data) {
        return new Promise((resolve, reject) => {
            this.crudSerive
                .updateData(`/${this._coursesCollection}/${courseID}/${this._chaptersCollection}/${chapterID}/${this._lecturesCollection}`, lectureID, data)
                .then((res) => resolve(res))
                .catch((error) => reject(error));
        });
    }
    async deleteLecture(courseID, chapterID, lectureID) {
        return new Promise((resolve, reject) => {
            this.crudSerive
                .deleteData(`/${this._coursesCollection}/${courseID}/${this._chaptersCollection}/${chapterID}/${this._lecturesCollection}`, lectureID)
                .then((res) => resolve(res))
                .catch((error) => reject(error));
        });
    }
    //=============================================================
    //=============================================================
    //Slides Methods:
    //=============================================================
    getAllSlides(courseID, chapterID, lectureID) {
        return this.crudSerive
            .getDataByOrder(`/${this._coursesCollection}/${courseID}/${this._chaptersCollection}/${chapterID}/${this._lecturesCollection}/${lectureID}/${this._slidesCollection}`, 'seqNo')
            .pipe(map((docSnaps) => {
            return docSnaps.map((docSnap) => {
                return {
                    id: docSnap.payload.doc.id,
                    ...docSnap.payload.doc.data(),
                };
            });
        }));
    }
    async addSlide(courseID, chapterID, lectureID, data) {
        return new Promise((resolve, reject) => {
            this.crudSerive
                .addDataToSubCollection(`/${this._coursesCollection}/${courseID}/${this._chaptersCollection}/${chapterID}/${this._lecturesCollection}/${lectureID}/${this._slidesCollection}`, data)
                .then((res) => resolve(res))
                .catch((error) => reject(error));
        });
    }
    async editSlide(courseID, chapterID, lectureID, slideID, data) {
        return new Promise((resolve, reject) => {
            this.crudSerive
                .updateData(`/${this._coursesCollection}/${courseID}/${this._chaptersCollection}/${chapterID}/${this._lecturesCollection}/${lectureID}/${this._slidesCollection}`, slideID, data)
                .then((res) => resolve(res))
                .catch((error) => reject(error));
        });
    }
    async deleteSlide(courseID, chapterID, lectureID, slideID) {
        return new Promise((resolve, reject) => {
            this.crudSerive
                .deleteData(`/${this._coursesCollection}/${courseID}/${this._chaptersCollection}/${chapterID}/${this._lecturesCollection}/${lectureID}/${this._slidesCollection}`, slideID)
                .then((res) => resolve(res))
                .catch((error) => reject(error));
        });
    }
    getFirstCourse() {
        return this.crudSerive.getSingleDataAsc(this._coursesCollection);
        // return new Promise((resolve,reject)=>{
        // })
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CoursesService, deps: [{ token: i1.CrudService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CoursesService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CoursesService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.CrudService }]; } });
//# sourceMappingURL=data:application/json;base64,