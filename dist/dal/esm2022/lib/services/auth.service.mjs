import { Injectable } from '@angular/core';
import { EmailAuthProvider } from '@angular/fire/auth';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/fire/compat/auth";
export class AuthService {
    constructor(auth) {
        this.auth = auth;
        //Class Properties
        this.currentUserChange = new BehaviorSubject(null);
        this.user = this.auth.user;
        this.activeUser = this.auth.currentUser;
    }
    //Class Methods
    async signIn(email, password, stayLoggedIn) {
        await this.auth.setPersistence(stayLoggedIn ? 'local' : 'session').then();
        return new Promise((resolve, reject) => {
            this.auth
                .signInWithEmailAndPassword(email, password)
                .then((res) => resolve(res))
                .catch((error) => reject(error));
        });
    }
    async signUp(email, password) {
        return new Promise((resolve, reject) => {
            this.auth
                .createUserWithEmailAndPassword(email, password)
                .then((res) => resolve(res))
                .catch((error) => reject(error));
        });
    }
    async verifyEmail(user) {
        return new Promise((resolve, reject) => {
            user
                .sendEmailVerification()
                .then((res) => resolve(res))
                .catch((error) => reject(error));
        });
    }
    async resetPasswordEmail(email) {
        return new Promise((resolve, reject) => {
            this.auth
                .sendPasswordResetEmail(email)
                .then((res) => resolve(res))
                .catch((error) => reject(error));
        });
    }
    async reauthenticate(password) {
        let user = await this.auth.currentUser;
        return new Promise((resolve, reject) => {
            user
                .reauthenticateWithCredential(EmailAuthProvider.credential(user.email, password))
                .then((userCre) => resolve(userCre))
                .catch((err) => reject(err));
        });
    }
    async updateDisplayName(firstName, lastName) {
        let user = await this.auth.currentUser;
        if (firstName === '')
            firstName = user.displayName.split(' ')[0];
        if (lastName === '')
            lastName = user.displayName.split(' ')[1];
        return new Promise((resolve, reject) => {
            user
                .updateProfile({
                displayName: `${firstName} ${lastName}`,
            })
                .then((res) => resolve(res))
                .catch((error) => reject(error));
        });
    }
    async updatePhoto(photoURL) {
        let user = await this.auth.currentUser;
        return new Promise((resolve, reject) => {
            user
                .updateProfile({
                photoURL,
            })
                .then(resolve)
                .catch(reject);
        });
    }
    // async verifyNewEamil() {
    //   this.activeUser.ve
    // }
    async updateEmail(email) {
        const user = await this.auth.currentUser;
        return new Promise((resolve, reject) => {
            user
                .verifyBeforeUpdateEmail(email)
                .then((res) => resolve(res))
                .catch((error) => reject(error));
        });
    }
    async changePassword(newPassword) {
        let user = await this.auth.currentUser;
        return new Promise((resolve, reject) => {
            user
                .updatePassword(newPassword)
                .then((res) => resolve(res))
                .catch((err) => reject(err));
        });
    }
    async logout() {
        return new Promise((resolve, reject) => {
            this.auth
                .signOut()
                .then((res) => resolve(res))
                .catch((error) => reject(error));
        });
    }
    async deleteAccount() {
        let user = await this.auth.currentUser;
        return new Promise((resolve, reject) => {
            user
                .delete()
                .then((res) => resolve(res))
                .catch((err) => reject(err));
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: AuthService, deps: [{ token: i1.AngularFireAuth }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: AuthService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: AuthService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.AngularFireAuth }]; } });
//# sourceMappingURL=data:application/json;base64,